package org.iucn.sis.shared.api.models.primitivefields;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.iucn.sis.shared.api.debug.Debug;
import org.iucn.sis.shared.api.models.Field;
import org.iucn.sis.shared.api.models.PrimitiveField;

import com.solertium.lwxml.shared.NativeElement;

/**
 * ForeignKeyListPrimitiveField generated by hbm2java
 */
public class ForeignKeyListPrimitiveField extends PrimitiveField<List<Integer>> implements
		java.io.Serializable {
	
	private static final long serialVersionUID = 1L;

	private String tableID;
	private int[] fk_list_primitive_values;
	
	public ForeignKeyListPrimitiveField() {
	}

	public ForeignKeyListPrimitiveField(String name, Field field) {
		super(name, field);
	}
	
	public ForeignKeyListPrimitiveField(String name, Field field, String tableID) {
		super(name, field);
		this.tableID = tableID;
	}

	public String getTableID() {
		return this.tableID;
	}

	public void setTableID(String tableID) {
		this.tableID = tableID;
	}
	
	public int[] getFk_list_primitive_values() {
		return this.fk_list_primitive_values;
	}

	public void setFk_list_primitive_values(int[] fk_list_primitive_values) {
		this.fk_list_primitive_values = fk_list_primitive_values;
	}

	@Override
	public ForeignKeyListPrimitiveField deepCopy() {
		ForeignKeyListPrimitiveField ret = new ForeignKeyListPrimitiveField();
		copyInto(ret);
		ret.setTableID(getTableID());
		return ret;
	}
	
	@Override
	public List<Integer> getValue() {
		List<Integer> list = new ArrayList<Integer>();
		if (fk_list_primitive_values == null)
			return list;
		
		for( int cur : fk_list_primitive_values )
			list.add(new Integer(cur));
		Collections.sort(list);
		return list;
	}
	
	@Override
	public void appendValue(List<Integer> newValue) {
		List<Integer> cur = getValue();
		cur.addAll(newValue);
		setValue(cur);
	}
	
	@Override
	public String getRawValue() {
		List<Integer> values = getValue();
		if (values == null || values.isEmpty())
			return "";
		
		StringBuilder str = new StringBuilder();
		for (int cur : values)
			str.append(","+cur);
		
		return str.substring(1);
	}
	
	@Override
	public String toXML() {
		StringBuilder str = new StringBuilder("<");
		str.append(getName());
		str.append(" id=\"");
		str.append(getId() == null ? "0" : getId());
		str.append("\" ");
		str.append(TYPE_TAG);
		str.append("=\"");
		str.append(getSimpleName());
		str.append("\" tableID=\"");
		str.append(getTableID());
		str.append("\"><![CDATA[");
		str.append(getRawValue());
		str.append("]]></" + getName() + ">");
		return str.toString();
	}
	
	@Override
	public void fromXML(NativeElement xml) {
		super.fromXML(xml);
		
		String tableID = xml.getAttribute("tableID");
		setTableID(tableID);
	}
	
	@Override
	public String getSimpleName() {
		return PrimitiveFieldType.FOREIGN_KEY_LIST_PRIMITIVE.getName();
	}
	
	@Override
	/**
	 * Expects a CSV of integers. Whitespace surrounding the integers is trimmed before
	 * they are parsed into integers. If value is null or empty string, sets value to 
	 * an empty array.
	 */
	public void setRawValue(String value) {
		int [] newList;
		if( value == null || value.equals("") )
			newList = new int[0];
		else {
			String [] newValue = value.split(",");
			newList = new int[newValue.length];
			for( int i = 0; i < newValue.length; i++ ) {
				try {
					newList[i] = Integer.parseInt(newValue[i].trim());
				} catch (Throwable e) {
					Debug.println("Failed to save {0} from {1}", newValue[i], value);
				}
			}
		}
		
		setFk_list_primitive_values(newList);
	}
	
	public void setValue(List<Integer> newValue) {
		int [] newList = new int[newValue.size()];
		for( int i = 0; i < newValue.size(); i++ )
			newList[i] = newValue.get(i).intValue();
		
		setFk_list_primitive_values(newList);
	};
	
}
